<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute"
				paddingLeft="0" paddingTop="0" paddingBottom="0" paddingRight="0" applicationComplete="init()">
	<mx:Style>
		.runButtonStyle {
			overSkin: ClassReference("com.css3ps.RunButtonSkin");
			upSkin: ClassReference("com.css3ps.RunButtonSkin");
			downSkin: ClassReference("com.css3ps.RunButtonSkin");
			selectedDisabledSkin: ClassReference("com.css3ps.RunButtonSkin");
		}
	</mx:Style>
	<mx:Script>
		<![CDATA[
			import com.adobe.csxs.core.CSXSInterface;
			import com.adobe.csxs.types.*;

			import flash.events.TimerEvent;
			import flash.net.URLRequest;
			import flash.utils.Timer;

			import mx.controls.Alert;
			import mx.rpc.events.*;
			import mx.utils.Base64Encoder;
			import mx.utils.UIDUtil;

			private var myTimer:Timer = null;
			private var guid:String = null;

			private function init():void {
				var color:uint = 0xffffff;
				var endColor:uint = 0xcbe8f2;

				try	{
					var skinInfo:AppSkinInfo = CSXSInterface.instance.getHostEnvironment().data.appSkinInfo;
					color = skinInfo.panelBackgroundColor.color.rgb;
					endColor = color;
				} catch (e:Error) {
				}

				setStyle("backgroundGradientColors", [color, color]);
				setStyle("themeColor", color);
				setStyle("backgroundColor", color);

				run.setStyle("fillColors", [color, endColor]);
			}

			private function enableRun():void {
				run.selected = false;
				run.enabled = true;
			}
			
			private function stylesHandler(event:ResultEvent):void {
				enableRun();
			}

			private function faultHandler(event:FaultEvent):void {
				enableRun();
				//Alert.show("Failed to send data to our server for processing. Check please your internet connection or firewall.\n\nDetails:\n" + event, "Error", Alert.OK, Sprite(mx.core.Application.application));
				Alert.show("Failed to send data to our server for processing. Check please your internet connection or firewall", "Error", Alert.OK, Sprite(mx.core.Application.application));
			}
			
			public function callGenerate():void {
				run.selected = true;
				run.enabled = false;

				guid = UIDUtil.createUID();
				var link:String = 'http://css3.ps/?=' + guid;

				try {
					var request:URLRequest = new URLRequest(link);
					navigateToURL(request);
				}
				catch (e:Error) {
					Alert.show("Failed to open browser. Results available on\n" + link + "\n\nDetails:\n" + e,
						"Error", Alert.OK, Sprite(mx.core.Application.application));
				}

				myTimer = new Timer(100, 1);
				myTimer.addEventListener(TimerEvent.TIMER, generate);
				myTimer.start();
			}

			private function encode(xml:XML):String {
				XML.prettyPrinting = false;

				var bytes:ByteArray = new ByteArray();
				//bytes.writeUTF(xml.toXMLString());
				bytes.writeUTFBytes(xml.toXMLString());
				bytes.compress();

				var base64Encoder:Base64Encoder = new Base64Encoder();
				base64Encoder.insertNewLines = false;
				base64Encoder.encodeBytes(bytes);

				return base64Encoder.toString();
			}

			public function generate(event:TimerEvent):void {
				var callDate:Date = new Date();

				try {
					var reqResult:SyncRequestResult = CSXSInterface.instance.evalScript("generate");
					if (SyncRequestResult.COMPLETE == reqResult.status) {
						if (reqResult.data.styles) {
							var stylesXml:XML = new XML(reqResult.data.styles);
							var sendDate:Date = new Date();
							if (stylesXml.child("info").length() > 0) {
								stylesXml.child("info")[0].appendChild(<call_start>{callDate.toString()}</call_start>);
								stylesXml.child("info")[0].appendChild(<call_end>{sendDate.toString()}</call_end>);								
							}

							userRequest.send({ id:guid, version:"1.0.158", data:encode(stylesXml) });
						} else if (reqResult.data.error) {
							enableRun();
							Alert.show("Error occurred:\n" + reqResult.data.error, "Error", Alert.OK, Sprite(mx.core.Application.application));
						}
						return;
					}
					enableRun();
					Alert.show("Unknown error occurred", "Error", Alert.OK, Sprite(mx.core.Application.application));
				} catch (e:Error) {
					enableRun();
					Alert.show("Error occurred:\n" + e, "Error", Alert.OK, Sprite(mx.core.Application.application));
				}
			}
		]]>
	</mx:Script>

	<mx:Button id="run" click="callGenerate();" toggle="true" percentHeight="100" percentWidth="100"
			paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0"
			cornerRadius="0" styleName="runButtonStyle" />
	<mx:HTTPService id="userRequest" url="http://css3.ps/Handler.ashx" useProxy="false" method="POST"
					result="stylesHandler(event)" fault="faultHandler(event)">
	</mx:HTTPService>
</mx:Application>
